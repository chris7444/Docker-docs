<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="k8s-nfs-provisioner">
<title>NFS provisioner for Kubernetes</title>
<body>
<section>
<title>Prerequisites</title>
  
<ul>
<li>Configure the variables described in the section <xref href="k8s-persistent-volume-config.dita"/></li>
<li>Install the <codeph>kubectl</codeph> binary on your Ansible box -  
  see <xref href="https://docs.docker.com/ee/ucp/user-access/kubectl/" format="html" scope="external"/></li>  
<li>Install the UCP Client bundle for the <codeph>admin</codeph> user- 
  see <xref href="https://docs.docker.com/ee/ucp/user-access/cli/#download-client-certificates-by-using-the-rest-api" format="html" scope="external"/></li>  
<li>Confirm that you can connect to the cluster by running a test command, for example, <codeph>kubectl get nodes</codeph></li>  
</ul>  
  
</section>

<section>
<title>Running the playbook</title>
  
<p>Once the prerequisites are satisfied, run the appropriate playbook on your Ansible node:</p>  
  
<codeblock># cd Docker-Synergy/ops
# ansible-playbook -i vm_hosts playbooks/k8s-nfs-provisioner.yml
</codeblock>  
  
</section>
 
<section>
<title>Post-deployment verification</title>
 
<p>In this example, it is assumed that the relevant variables are configured as follows:</p> 
  
<table id="k8s-persistent-volume-verify" frame="none">
<title>Configuration values</title>
<tgroup cols="2">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<thead>
<row>
<entry>Variable</entry>
<entry>Value</entry>
</row>
</thead>
<tbody>

<row>
<entry>nfs_provisioner_role</entry>
<entry><codeph>nfs-provisioner-runner</codeph></entry>
</row>     

 
<row>
<entry>nfs_provisioner_name</entry> 
<entry><codeph>hpe.com/nfs</codeph></entry>
</row>
 
<row>
<entry>nfs_provisioner_storage_class_name</entry> 
<entry><codeph><b>nfs</b></codeph></entry>
</row>

<row>
<entry>nfs_provisioner_server_ip</entry> 
<entry><codeph>hpe-nfs.cloudra.local</codeph></entry>
</row>

<row>
<entry>nfs_provisioner_server_share</entry> 
<entry><codeph>/k8s</codeph></entry>
</row>

  
</tbody>
</tgroup>
</table>  
  
<p>In this instance, the server IP is set to the NFS VM that has been deployed.</p>


<p>Running the command <codeph>kubectl get sc</codeph> will show the storage class named <codeph>nfs</codeph>:</p>

<codeblock>
# kubectl get sc
NAME      PROVISIONER   AGE
nfs       hpe.com/nfs   5m
</codeblock>


<p>Create a temporary file <codeph>/tmp/pvc.yml</codeph> for a persistent volume claim (PVC) named <codeph>dynnfs-testpvc</codeph>
with a storage class of <codeph>nfs</codeph>
</p>
<codeblock># cat /tmp/pvc.yml &lt;&lt;EOF
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
name: <b>dynnfs-testpvc</b>
annotations:
volume.beta.kubernetes.io/storage-class: "<b>nfs</b>"
spec:
accessModes:
- ReadWriteMany
resources:
requests:
storage: 100Mi
EOF  </codeblock>

  
<p>Create the resource by running <codeph>kubectl apply</codeph> on the file.</p>

<codeblock># kubectl apply -f /tmp/pvc.yml
persistentvolumeclaim "dynnfs-testpvc" created</codeblock>
  
<p>Verify that the corresponding persistent volume (PV) was created at the same time.</p>  
  
 <codeblock># kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE
pvc-e685a9d2-8a6f-11e8-9025-0242ac110010   100Mi      RWX            Delete           Bound     default/dynnfs-testpvc   nfs                      4s
</codeblock> 
  
<p></p> 


<p>Define a pod that will mount the persistent volume by using the persistent volume claim. The persistent volume
  is mounted under <codeph>/tmp/foo</codeph>.</p>
  
<codeblock>cat /tmp/pod.yml &lt;&lt;EOF
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: <b>dynnfs-testpod</b>
spec:
  selector:
    matchLabels:
      app: dynnfs-testpod
  replicas: 1
  template:
    metadata:
      labels:
        app: dynnfs-testpod
    spec:
      volumes:
      - name: pod-data
        persistentVolumeClaim:
          claimName: <b>dynnfs-testpvc</b>
      containers:
      - name: dynnfs-testpod
        command:
        - sh
        - -c
        - while true; do sleep 1; done
        image: radial/busyboxplus:curl
        volumeMounts:
        - mountPath: <b>/tmp/foo</b>
          name: pod-data
EOF</codeblock>  
  
  
</section>
  
</body>
</topic>
