<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="backup-restore-ucp-dtr">
<title>Backup and restore UCP and DTR</title>
<body>

<section>
<title>Introduction</title>
<p>The playbooks provided in this solution implement the backup and restore procedures as they
are described in the Docker documentation at <xref
href="https://docs.docker.com/enterprise/backup/" format="html"/></p>
<ul>
<li><codeph>playbooks/backup_swarm.yml</codeph> is used to backup the swarm data</li>
<li><codeph>playbooks/backup_ucp.yml</codeph> is used to backup UCP</li>
<li><codeph>playbooks/backup_dtr_meta.yml</codeph> is used to backup DTR metadata</li>
<li><codeph>playbooks/backup_dtr_images.yml</codeph> is used to backup DTR images</li>
</ul>
</section>

<section>
<title>Backup variables</title>
<p><xref href="backup-restore-ucp-dtr.dita#backup-restore-ucp-dtr/backup-ucp-table-content"/>
shows the variables related to backing up UCP and DTR. All these variables are 
defined in the file <b>group_vars/backup</b>. All the data that is backed up is streamed 
over an SSH connection to the backup server. Currently, the playbooks only support the use of the
Ansible box as the backup server.</p>
  
<table id="backup-ucp-table-content" frame="none">
<title>Backup variables</title>
<!--<colgroup xmlns:ac="ac" xmlns:ri="ri">
<col/>
<col/>
</colgroup>-->

<tgroup cols="3">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<colspec colnum="3" colname="c3" align="left"/>
<thead>
<row>
<entry>Variable</entry>
<entry>File</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>backup_server</entry>
<entry><b>group_vars/backup</b></entry>
<entry>Currently, the playbooks only support the use of the
Ansible box as the backup server. </entry>
</row>  
<row>
<entry>backup_dest</entry>
<entry><b>group_vars/backup</b></entry>
<entry>This variable should point to an existing folder on your ansible box where the
root use has write access. All the backups will be stored in this folder. For
example, <codeph>/root/backup</codeph></entry>
</row>
</tbody>
</tgroup>
</table>
</section>

<section>
<title>Backing up the Swarm</title>
<p> When you backup the swarm, your services and stacks definitions ar backed up as well as
networks definitions. However, Docker volumes or their contents are not backed up. (If
Docker volumes are defined in stacks, they will be re-created when you restore the stacks,
but their content will be lost). You backup the swarm using the playbook named
<codeph>backup_swarm.yml</codeph> which is located in the <codeph>playbooks</codeph>
folder on your Ansible box. The playbook is invoked as follows: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_swarm.yml</codeblock>


<p>This playbook creates an archive in the folder specified by the variable
<codeph>backup_dest</codeph> in <codeph>group_vars/backup</codeph>. By default, the file
is named using the following pattern:</p>

<codeblock>&lt;backup_dest>/backup_swarm_&lt;vmname>_&lt;timestamp>.tar</codeblock>

<p>where <codeph>&lt;vmname></codeph> is the name of the host (in the inventory) that was used
to take the backup, and <codeph>&lt;timestamp></codeph> is the time at which the backup was
taken. <!--The <codeph>.tar</codeph> contains the backup data while the <codeph>.vars.tgz</codeph>
file contains metadata regarding the backup.--></p>

<p>You can override the generated file name by defining the variable
<b>backup_name</b> on the command line when running the playbook. In the example below: </p>

<codeblock># ansible-playbook -i vm_hosts playbooks/backup_swarm.yml -e backup_name=<b>my_swarm_backup</b></codeblock>

<p>the generated file won't have <codeph>&lt;vmname></codeph> or
<codeph>&lt;timestamp></codeph> appended:</p>

<codeblock>&lt;backup_dest>/my_swarm_backup.tar</codeblock>



<note type="warning">The playbook stops the Docker daemon on the machine that is used to
take the backup. The playbook will verify that enough managers are running in the cluster to
maintain the quroum. However, you must understand that during a backup, your Docker cluster will not
survive the failure of an additional manager. For more information,  see the Docker
documentation at
<xref href="https://docs.docker.com/engine/swarm/admin_guide/#recover-from-disasterv" format="html"/></note>
  
  
</section>

<section>
<title>Backing up the Universal Control Plane (UCP)</title> 
  
<p>When you backup UCP, you save the following data/metadata: </p>  

<table id="backup-ucp-data-meta-table-content" frame="none">
<title>UCP data backed up</title>
<!--<colgroup xmlns:ac="ac" xmlns:ri="ri">
<col/>
<col/>
</colgroup>-->

<tgroup cols="2">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<thead>
<row>
<entry>Data</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>Configurations</entry>
<entry>The UCP cluster configurations, as shown by <codeph>docker config ls</codeph>, including Docker EE license and swarm and client CAs	</entry>
</row>  
<row>
<entry>Access control</entry>
<entry>Permissions for teams to swarm resources, including collections, grants, and roles</entry>
</row>  
<row>
<entry>Certificates and keys</entry>
<entry>The certificates, public keys, and private keys that are used for authentication and mutual TLS communication</entry>
</row>  
<row>
<entry>Metrics data</entry>
<entry>Monitoring data gathered by UCP</entry>
</row>  
<row>
<entry>Organizations</entry>
<entry>Your users, teams, and orgs</entry>
</row>	 	 
<row>
<entry>Volumes</entry>
<entry>All UCP named volumes, which include all UCP component certs and data</entry>
</row>	
</tbody>
</tgroup>
</table>
		 	 
		 	 
		 	 
	  
  
  
  
</section>
  
</body>
</topic>
