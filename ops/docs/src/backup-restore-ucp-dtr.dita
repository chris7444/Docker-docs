<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="backup-restore-ucp-dtr">
<title>Backup and restore UCP and DTR</title>
<body>

<section>
<title>Introduction</title>
<p>The playbooks provided in this solution implement the backup and restore procedures as they
are described in the Docker documentation at <xref
href="https://docs.docker.com/enterprise/backup/" format="html"/></p>
<ul>
<li><codeph>playbooks/backup_swarm.yml</codeph> is used to backup the swarm data</li>
<li><codeph>playbooks/backup_ucp.yml</codeph> is used to backup UCP</li>
<li><codeph>playbooks/backup_dtr_meta.yml</codeph> is used to backup DTR metadata</li>
<li><codeph>playbooks/backup_dtr_images.yml</codeph> is used to backup DTR images</li>
</ul>
  
<note type="note">It is important make copies of the backed up data and store the copies in a separate physical location. 
You must also recognize that the backed up data contains sensitive information such as private keys and so it is important to restrict
access to the generated files.</note>  
  
</section>

<section>
<title>Backup variables</title>
<p><xref href="backup-restore-ucp-dtr.dita#backup-restore-ucp-dtr/backup-ucp-table-content"/>
shows the variables related to backing up UCP and DTR. All these variables are defined in
the file <b>group_vars/backup</b>. All the data that is backed up is streamed over an SSH
connection to the backup server. Currently, the playbooks only support the use of the
Ansible box as the backup server.</p>
<table id="backup-ucp-table-content" frame="none">
<title>Backup variables</title>
<!--<colgroup xmlns:ac="ac" xmlns:ri="ri">
<col/>
<col/>
</colgroup>-->

<tgroup cols="3">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<colspec colnum="3" colname="c3" align="left"/>
<thead>
<row>
<entry>Variable</entry>
<entry>File</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>backup_server</entry>
<entry><b>group_vars/backup</b></entry>
<entry>Currently, the playbooks only support the use of the Ansible box as the backup
server. </entry>
</row>
<row>
<entry>backup_dest</entry>
<entry><b>group_vars/backup</b></entry>
<entry>This variable should point to an existing folder on your ansible box where the
root use has write access. All the backups will be stored in this folder. For
example, <codeph>/root/backup</codeph></entry>
</row>
</tbody>
</tgroup>
</table>
</section>

<section>
<title>Backing up the Swarm</title>
<p> When you backup the swarm, your services and stacks definitions ar backed up as well as
networks definitions. However, Docker volumes or their contents are not backed up. (If
Docker volumes are defined in stacks, they will be re-created when you restore the stacks,
but their content will be lost). You backup the swarm using the playbook named
<codeph>backup_swarm.yml</codeph> which is located in the <codeph>playbooks</codeph>
folder on your Ansible box. The playbook is invoked as follows: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_swarm.yml</codeblock>
<p>This playbook creates an archive in the folder specified by the variable
<codeph>backup_dest</codeph> in <codeph>group_vars/backup</codeph>. By default, the file
is named using the following pattern:</p>
<codeblock>&lt;backup_dest>/backup_swarm_&lt;vmname>_&lt;timestamp>.tgz</codeblock>
<p>where <codeph>&lt;vmname></codeph> is the name of the host (in the inventory) that was used
to take the backup, and <codeph>&lt;timestamp></codeph> is the time at which the backup was
taken.
<!--The <codeph>.tar</codeph> contains the backup data while the <codeph>.vars.tgz</codeph>
file contains metadata regarding the backup.--></p>
<p>You can override the generated file name by defining the variable <b>backup_name</b> on the
command line when running the playbook. In the example below: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_swarm.yml -e backup_name=<b>my_swarm_backup</b></codeblock>
<p>the generated file won't have <codeph>&lt;vmname></codeph> or
<codeph>&lt;timestamp></codeph> appended:</p>
<codeblock>&lt;backup_dest>/my_swarm_backup.tgz</codeblock>
<note type="warning">The playbook stops the Docker daemon on the machine that is used to take
the backup. The playbook will verify that enough managers are running in the cluster to
maintain the quroum. However, you must understand that during a backup, your Docker cluster
will not survive the failure of an additional manager. For more information, see the Docker
documentation at <xref
href="https://docs.docker.com/engine/swarm/admin_guide/#recover-from-disasterv"
format="html"/></note>
</section>

<section>
<title>Backing up the Universal Control Plane (UCP)</title>
<p>When you backup UCP, you save the following data/metadata: </p>
<table id="backup-ucp-data-meta-table-content" frame="none">
<title>UCP data backed up</title>
<!--<colgroup xmlns:ac="ac" xmlns:ri="ri">
<col/>
<col/>
</colgroup>-->

<tgroup cols="2">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<thead>
<row>
<entry>Data</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>Configurations</entry>
<entry>The UCP cluster configurations, as shown by <codeph>docker config ls</codeph>,
including Docker EE license and swarm and client CAs </entry>
</row>
<row>
<entry>Access control</entry>
<entry>Permissions for teams to swarm resources, including collections, grants, and
roles</entry>
</row>
<row>
<entry>Certificates and keys</entry>
<entry>The certificates, public keys, and private keys that are used for
authentication and mutual TLS communication</entry>
</row>
<row>
<entry>Metrics data</entry>
<entry>Monitoring data gathered by UCP</entry>
</row>
<row>
<entry>Organizations</entry>
<entry>Your users, teams, and orgs</entry>
</row>
<row>
<entry>Volumes</entry>
<entry>All <xref
href="https://docs.docker.com/datacenter/ucp/2.2/guides/architecture/#volumes-used-by-ucp"
format="html">UCP named volumes</xref>, which include all UCP component certs and
data</entry>
</row>
</tbody>
</tgroup>
</table>
<p>To make a backup of UCP, use <codeph>playbook/backup_ucp.yml</codeph></p>
<codeblock># ansible-playbook -i vm_host playbooks/backup_ucp.yml</codeblock>
<p>This playbook creates an archive in the folder specified by the variable
<codeph>backup_dest</codeph> in <codeph>group_vars/backup</codeph>. By default, the file
is named using the following pattern:</p>
<codeblock>&lt;backup_dest>/backup_ucp_&lt;ucpid>_&lt;vmname>_&lt;timestamp>.tgz</codeblock>
<p>where <codeph>&lt;ucpid></codeph> is the ID of the UCP instance,
<codeph>&lt;vmname></codeph> is the name of the host (in the inventory) that was used to
take the backup, and <codeph>&lt;timestamp></codeph> is the time at which the backup was
taken.</p>
<p>You can override the generated file name by defining the variable <b>backup_name</b> on the
command line when running the playbook. In the example below: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_ucp.yml -e backup_name=<b>my_ucp_backup</b></codeblock>
<p>the generated file won't have <codeph>&lt;vmname></codeph> or
<codeph>&lt;timestamp></codeph> appended:</p>
<codeblock>&lt;backup_dest>/my_ucp_backup.tgz</codeblock>
<note type="warning">To create a consistent backup, the backup command temporarily stops the
UCP containers running on the node where the backup is being performed. User resources, such
as services, containers, and stacks are not affected by this operation and will continue
to operate as expected. Any long-lasting <codeph>docker exec</codeph>, <codeph>docker logs</codeph>, <codeph>docker events</codeph>, 
or <codeph>docker attach</codeph> operations on the
affected manager node will be disconnected.</note>
  
<p>For more information on UCP backup, see the Docker documentation at
<xref href="https://docs.docker.com/datacenter/ucp/2.2/guides/admin/backups-and-disaster-recovery/" format="html"/></p>  
  
</section>


<section>
<title>Backing up the Docker Trusted Registry (DTR)</title>
<p>When you backup DTR, you save the following data/metadata: </p>
<table id="backup-dtr-data-meta-table-content" frame="none">
<title>UCP data backed up</title>
<!--<colgroup xmlns:ac="ac" xmlns:ri="ri">
<col/>
<col/>
</colgroup>-->

<tgroup cols="3">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<colspec colnum="3" colname="c3" align="left"/>
<thead>
<row>
<entry>Data</entry>
<entry>Backed up?</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry>Configurations</entry>
<entry>yes</entry>
<entry>DTR settings</entry>
</row>
<row>
<entry>Repository metadata</entry>
<entry>yes</entry>
<entry>Metadata like image architecture and size</entry>
</row>
<row>
<entry>Access control to repos and images</entry>
<entry>yes</entry>
<entry>Data about who has access to which images</entry>
</row>
<row>
<entry>Notary data</entry>
<entry>yes</entry>
<entry>Signatures and digests for images that are signed</entry>
</row>
<row>
<entry>Scan results</entry>
<entry>yes</entry>
<entry>Information about vulnerabilities in your images</entry>
</row>
<row>
<entry>Certificates and keys</entry>
<entry>yes</entry>
<entry>TLS certificates and keys used by DTR</entry>
</row>
<row>
<entry>Image content</entry>
<entry>no</entry>
<entry>Needs to be backed up separately, depends on DTR configuration</entry>
</row>
<row>
<entry>Users, orgs, teams</entry>
<entry>no</entry>
<entry>Create a UCP backup to backup this data</entry>
</row>
<row>
<entry>Vulnerability database</entry>
<entry>no</entry>
<entry>Can be re-downloaded after a restore</entry>
</row>  
</tbody>
</tgroup>
</table>


<p>To make a backup of DTR metadata, use <codeph>playbook/backup_dtr_metadata.yml</codeph></p>
<codeblock># ansible-playbook -i vm_host playbooks/backup_dtr_metadata.yml</codeblock>
<p>This playbook creates an archive in the folder specified by the variable
<codeph>backup_dest</codeph> in <codeph>group_vars/backup</codeph>. By default, the file
is named using the following pattern:</p>
<codeblock>&lt;backup_dest>/backup_dtr_meta_&lt;replica_id>_&lt;vmname>_&lt;timestamp>.tgz</codeblock>
<p>where <codeph>&lt;replica_id></codeph> is the ID of the DTR replica that was backed up,
<codeph>&lt;vmname></codeph> is the name of the host (in the inventory) that was used to
take the backup, and <codeph>&lt;timestamp></codeph> is the time at which the backup was
taken.</p>
  
<p>You can override the generated file name by defining the variable <b>backup_name</b> on the
command line when running the playbook. In the example below: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_dtr_metadata.yml -e backup_name=<b>my_dtr_metadata_backup</b></codeblock>
<p>the generated file won't have <codeph>&lt;vmname></codeph> or
<codeph>&lt;timestamp></codeph> appended:</p>
<codeblock>&lt;backup_dest>/my_dtr_metadata_backup.tgz</codeblock>

<p>For more information on DTR backups, see the Docker documentation at 
<xref href="https://docs.docker.com/datacenter/dtr/2.4/guides/admin/backups-and-disaster-recovery/" format="html"/></p>

</section>


<section>
<title>Backing up DTR data (images)</title>  
  
<p>To make a backup of the images that are inventoried in DTR and stored on the NFS server, use <codeph>playbooks/backup_dtr_images.yml</codeph> </p>  
  
<codeblock># ansible-playbook -i vm_host playbooks/backup_dtr_images.yml</codeblock>  
  
<p>This playbook creates an archive in the folder specified by the variable
<codeph>backup_dest</codeph> in <codeph>group_vars/backup</codeph>. By default, the file
is named using the following pattern:</p>
<codeblock>&lt;backup_dest>/backup_dtr_data_&lt;replica_id>_&lt;vmname>_&lt;timestamp>.tgz</codeblock>
<p>where <codeph>&lt;replica_id></codeph> is the ID of the DTR replica that was backed up,
<codeph>&lt;vmname></codeph> is the name of the host (in the inventory) that was used to
take the backup, and <codeph>&lt;timestamp></codeph> is the time at which the backup was
taken.</p>  
  
<p>You can override the generated file name by defining the variable <b>backup_name</b> on the
command line when running the playbook. In the example below: </p>
<codeblock># ansible-playbook -i vm_hosts playbooks/backup_dtr_images.yml -e backup_name=<b>my_dtr_data_backup</b></codeblock>
<p>the generated file won't have <codeph>&lt;vmname></codeph> or
<codeph>&lt;timestamp></codeph> appended:</p>
<codeblock>&lt;backup_dest>/my_dtr_data_backup.tgz</codeblock>  
  
<p>For more information on DTR backups, see the Docker documentation at 
<xref href="https://docs.docker.com/datacenter/dtr/2.4/guides/admin/backups-and-disaster-recovery/" format="html"/></p>
  
  
</section>

<section>
<title>Restoring your cluster after a disaster</title>  
  
<p>The playbooks address a disaster recovery scenario where you have lost all your cluster. Before you can recover, you need to specify 
the locations of your backed up data using the following variables in <codeph>group_vars/backups</codeph></p>  
  
  
  
</section>


</body>
</topic>
