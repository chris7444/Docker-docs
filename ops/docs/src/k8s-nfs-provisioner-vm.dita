<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="k8s-nfs-provisioner-vm">
<title>Using NFS VM for post-deployment verification</title>
<body>
<section>

 
<p>In this example, it is assumed that the relevant variables are configured as follows:</p> 
  
<table id="k8s-persistent-volume-verify" frame="none">
<title>Configuration values</title>
<tgroup cols="2">
<colspec colnum="1" colname="c1" align="left"/>
<colspec colnum="2" colname="c2" align="left"/>
<thead>
<row>
<entry>Variable</entry>
<entry>Value</entry>
</row>
</thead>
<tbody>

<row>
<entry>nfs_provisioner_role</entry>
<entry><codeph>nfs-provisioner-runner</codeph></entry>
</row>     

 
<row>
<entry>nfs_provisioner_name</entry> 
<entry><codeph>hpe.com/nfs</codeph></entry>
</row>
 
<row>
<entry>nfs_provisioner_storage_class_name</entry> 
<entry><codeph><b>nfs</b></codeph></entry>
</row>

<row>
<entry>nfs_provisioner_server_ip</entry> 
<entry><codeph>hpe-nfs.cloudra.local</codeph></entry>
</row>

<row>
<entry>nfs_provisioner_server_share</entry> 
<entry><codeph>/k8s</codeph></entry>
</row>

  
</tbody>
</tgroup>
</table>  
  
<p>In this instance, the server IP is set to the NFS VM that has been deployed.</p>

<p>Ensure that your environment satisfies the prerequisites as described in <xref href="k8s-nfs-provisioner.dita"/> and then run the playbook:</p>  

<codeblock># cd <ph conkeyref="conrefs/gitrepo-string"/>
# ansible-playbook -i vm_hosts playbooks/k8s-nfs-provisioner.yml --vault-password-file .vault_pass
</codeblock> 

<p>Running the command <codeph>kubectl get sc</codeph> will show the storage class named <codeph>nfs</codeph>:</p>

<codeblock>
# kubectl get sc
NAME      PROVISIONER   AGE
nfs       hpe.com/nfs   5m
</codeblock>


<p>Create a temporary file <codeph>/tmp/pvc.yml</codeph> for a persistent volume claim (PVC) named <codeph>dynnfs-testpvc</codeph>
with a storage class of <codeph>nfs</codeph>
</p>
<codeblock># cat /tmp/pvc.yml &lt;&lt;EOF
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: <b>dynnfs-testpvc</b>
  annotations:
    volume.beta.kubernetes.io/storage-class: "<b>nfs</b>"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Mi
EOF  
</codeblock>

  
<p>Create the PVC resource by running <codeph>kubectl apply</codeph> on this file.</p>

<codeblock># kubectl apply -f /tmp/pvc.yml
persistentvolumeclaim "dynnfs-testpvc" created</codeblock>
  
<p>Verify that the corresponding persistent volume (PV) was created at the same time.</p>  
  
 <codeblock># kubectl get pv
NAME                                       CAPACITY   ACCESS MODES   RECLAIM POLICY   STATUS    CLAIM                    STORAGECLASS   REASON    AGE
pvc-e685a9d2-8a6f-11e8-9025-0242ac110010   100Mi      RWX            Delete           Bound     default/dynnfs-testpvc   nfs                      4s
</codeblock> 
  

<p>Define a pod that will mount the persistent volume through using the persistent volume claim. The persistent volume
  is mounted under <codeph>/tmp/foo</codeph>.</p>
  
<codeblock>cat /tmp/pod.yml &lt;&lt;EOF
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: <b>dynnfs-testpod</b>
spec:
  selector:
    matchLabels:
      app: dynnfs-testpod
  replicas: 1
  template:
    metadata:
      labels:
        app: dynnfs-testpod
    spec:
      volumes:
      - name: pod-data
        persistentVolumeClaim:
          claimName: <b>dynnfs-testpvc</b>
      containers:
      - name: dynnfs-testpod
        command:
        - sh
        - -c
        - while true; do sleep 1; done
        image: radial/busyboxplus:curl
        volumeMounts:
        - mountPath: <b>/tmp/foo</b>
          name: pod-data
EOF</codeblock>  
  
<p>Create the pod resource by running <codeph>kubectl apply</codeph> on the file.</p>  
  
  
<codeblock># kubectl apply -f /tmp/pod.yml
deployment.apps "dynnfs-testpod" created
</codeblock>  

<p>Retrieve the pod ID  and then execute a command in the pod to create a test file on the persistent volume. The file is named <codeph>/tmp/foo/bar.txt</codeph> 
 and contains the string <codeph>hello</codeph>.</p>

<codeblock># pod=$(kubectl get pod | awk '/dynnfs-testpod-/ {print $1}')
# kubectl exec -it $pod -- sh -c "<b>echo hello >/tmp/foo/bar.txt</b>"</codeblock>
  
  
<p>In this example, where the NFS VM is being used as the storage back-end, you can examine the content of the folder containing the 
persistent volumes. Given the values specified above, where the NFS VM is named <codeph>hpe-nfs</codeph> and 
  the <codeph>nfs_provisioner_server_share</codeph> is <codeph>k8s</codeph>, you can connect to the VM and explore the folder as follows. </p>  

<codeblock>
# ssh hpe-nfs ls -R /k8s
/k8s:
default-dynnfs-testpvc-pvc-e685a9d2-8a6f-11e8-9025-0242ac110010
 
/k8s/default-dynnfs-testpvc-pvc-e685a9d2-8a6f-11e8-9025-0242ac110010:
<b>bar.txt</b></codeblock>
  
<p>Examine the contents of the file to ensure that the string <codeph>hello</codeph> has been persisted in the file <codeph>bar.txt</codeph>.</p>  


<codeblock>
# ssh hpe-nfs cat /k8s/default-dynnfs-testpvc-pvc-e685a9d2-8a6f-11e8-9025-0242ac110010/bar.txt
<b>hello</b></codeblock>
  
  
  
  
</section>
  </body>
</topic>
